name: Cody — Apply Work Order

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  apply:
    # Runs when issue is labeled cody-apply OR on any issue comment (you can narrow later)
    if: >
      (github.event_name == 'issues' &&
       github.event.action == 'labeled' &&
       github.event.label.name == 'cody-apply') ||
      github.event_name == 'issue_comment'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse Work Order & Write Files
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = (context.payload.issue && context.payload.issue.body) || "";
            function section(title) {
              const re = new RegExp(`\\*\\*${title}\\*\\*[\\s\\r\\n]+([\\s\\S]*?)(?=\\n\\*\\*|$)`, 'i');
              const m = body.match(re);
              return m ? m[1].trim() : "";
            }

            const branchName  = section("Branch name");
            const fileOpsRaw  = section("File operations");
            const commitsRaw  = section("Commit messages");
            const prTitleBody = section("PR title and body");

            if (!branchName) throw new Error("Branch name not found in issue body.");
            if (!fileOpsRaw) throw new Error("File operations block not found.");
            if (!prTitleBody) throw new Error("PR title and body not found.");

            const commitMessages = (commitsRaw || "").split(/\r?\n/).map(s => s.trim()).filter(Boolean);
            const fs = require('fs'); const path = require('path');

            // Parse CREATE/APPEND blocks
            const lines = fileOpsRaw.split(/\r?\n/);
            let i = 0, ops = [];
            while (i < lines.length) {
              const line = (lines[i] || "").trim();
              if (!line) { i++; continue; }
              const m = line.match(/^(CREATE|APPEND)\s+(.+)$/i);
              if (!m) { i++; continue; }
              const op = m[1].toUpperCase(); const target = m[2].trim();
              i++;
              if ((lines[i] || "").trim() !== "<<<BEGIN") throw new Error(`Expected <<<BEGIN after ${op} ${target}`);
              i++;
              const buf = [];
              while (i < lines.length && (lines[i] || "").trim() !== "<<<END") { buf.push(lines[i]); i++; }
              if (i >= lines.length) throw new Error(`Missing <<<END for ${target}`);
              const content = buf.join("\n"); i++; // skip <<<END
              ops.push({ op, target, content });
            }

            // Write files
            for (const {op, target, content} of ops) {
              const full = path.join(process.cwd(), target);
              fs.mkdirSync(path.dirname(full), { recursive: true });
              if (op === "CREATE") fs.writeFileSync(full, content, "utf8");
              else {
                let prev = ""; try { prev = fs.readFileSync(full, "utf8"); } catch {}
                fs.writeFileSync(full, prev + (prev ? "\n" : "") + content, "utf8");
              }
              core.info(`${op} ${target} (${content.length} bytes)`);
            }

            // Split PR title/body (first line = title)
            const idx = prTitleBody.indexOf("\n");
            const prTitle = idx === -1 ? prTitleBody.trim() : prTitleBody.slice(0, idx).trim();
            const prBody  = idx === -1 ? "" : prTitleBody.slice(idx+1).trim();

            core.setOutput("branch", branchName);
            core.setOutput("commitMessage", commitMessages[0] || "chore(cody): apply work order files");
            core.setOutput("prTitle", prTitle);
            core.setOutput("prBody", prBody);

      - name: Create/Update Branch, Commit, Push
        run: |
          set -e
          BRANCH="${{ steps.parse.outputs.branch }}"
          git config user.name "cody-bot"
          git config user.email "cody-bot@users.noreply.github.com"
          git fetch origin || true
          git checkout -B "$BRANCH"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "${{ steps.parse.outputs.commitMessage }}"
          fi
          git push -u origin "$BRANCH" --force-with-lease

      - name: Open/Update PR
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const head = "${{ steps.parse.outputs.branch }}";
            const base = "main";
            const title = "${{ steps.parse.outputs.prTitle }}";
            const body  = `${{ steps.parse.outputs.prBody }}`;

            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner, repo: context.repo.repo,
              head: `${context.repo.owner}:${head}`, state: "open"
            });

            if (prs.length) {
              await github.rest.pulls.update({
                owner: context.repo.owner, repo: context.repo.repo,
                pull_number: prs[0].number, title, body
              });
              core.notice(`Updated PR #${prs[0].number}`);
            } else {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner, repo: context.repo.repo,
                title, body, head, base
              });
              core.notice(`Opened PR #${pr.number}`);
            }

      - name: Comment back on the issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "✅ Work order applied (branch pushed and PR opened/updated)."
            });
